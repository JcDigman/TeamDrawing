public static void main(String[] args) {
    String filePath = "src/Copy of MotorPH Employee Data.xlsx";
    Map<String, String[]> employeeData = getEmployeeDetails(filePath);
    Map<String, Map<String, Double>> weeklyHours = getWorkHoursPerWeek(filePath);
    displayEmployeeWorkHours(employeeData, weeklyHours);
}

public static Map<String, String[]> getEmployeeDetails(String filePath) {
    Map<String, String[]> employeeData = new LinkedHashMap<>();
    try (FileInputStream fis = new FileInputStream(new File(filePath));
         Workbook workbook = new XSSFWorkbook(fis)) {
        
        Sheet sheet = workbook.getSheet("Employee Details");
        if (sheet == null) {
            System.out.println("Employee Details sheet not found!");
            return employeeData;
        }
        
        for (Row row : sheet) {
            if (row.getRowNum() == 0) continue; // Skip header row
            
            Cell empNumberCell = row.getCell(0);
            Cell firstNameCell = row.getCell(2);
            Cell lastNameCell = row.getCell(1);
            Cell birthdayCell = row.getCell(3);
            
            if (empNumberCell == null || firstNameCell == null || lastNameCell == null || birthdayCell == null) {
                continue;
            }
            
            String empNumber = getCellValueAsString(empNumberCell);
            String firstName = firstNameCell.getStringCellValue();
            String lastName = lastNameCell.getStringCellValue();
            String birthday = formatDateCell(birthdayCell);
            
            employeeData.put(empNumber, new String[]{firstName, lastName, birthday});
        }
    } catch (IOException e) {
        System.out.println("Error reading Employee Details: " + e.getMessage());
    }
    return employeeData;
}

public static Map<String, Map<String, Double>> getWorkHoursPerWeek(String filePath) {
    Map<String, Map<String, Double>> weeklyHours = new HashMap<>();
    try (FileInputStream fis = new FileInputStream(new File(filePath));
         Workbook workbook = new XSSFWorkbook(fis)) {
        
        Sheet sheet = workbook.getSheet("Attendance Record");
        if (sheet == null) {
            System.out.println("Attendance Record sheet not found!");
            return weeklyHours;
        }
        
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy", Locale.ENGLISH);
        
        for (Row row : sheet) {
            if (row.getRowNum() == 0) continue; // Skip header row
            
            Cell empNumberCell = row.getCell(0);
            Cell dateCell = row.getCell(3);
            Cell logInCell = row.getCell(4);
            Cell logOutCell = row.getCell(5);
            
            if (empNumberCell == null || dateCell == null || logInCell == null || logOutCell == null) {
                continue;
            }
            
            String empNumber = getCellValueAsString(empNumberCell);
            LocalDate date = getCellDateValue(dateCell);
            String weekStart = date.with(java.time.temporal.TemporalAdjusters.previousOrSame(java.time.DayOfWeek.MONDAY)).format(dateFormatter);
            String weekEnd = date.with(java.time.temporal.TemporalAdjusters.nextOrSame(java.time.DayOfWeek.FRIDAY)).format(dateFormatter);
            String weekRange = "Week of " + weekStart + " - " + weekEnd;
            
            double hoursWorked = calculateWorkHours(logInCell, logOutCell);
            
            weeklyHours.putIfAbsent(empNumber, new LinkedHashMap<>());
            weeklyHours.get(empNumber).merge(weekRange, hoursWorked, Double::sum);
        }
    } catch (IOException e) {
        System.out.println("Error reading Attendance Record: " + e.getMessage());
    }
    return weeklyHours;
}

public static void displayEmployeeWorkHours(Map<String, String[]> employeeData, Map<String, Map<String, Double>> weeklyHours) {
    for (String empNumber : employeeData.keySet()) {
        String[] details = employeeData.get(empNumber);
        
        System.out.println("Employee # " + empNumber);
        System.out.println("Employee Name: " + details[0] + " " + details[1]);
        System.out.println("Birthday: " + details[2]);
        
        if (weeklyHours.containsKey(empNumber)) {
            for (Map.Entry<String, Double> weekEntry : weeklyHours.get(empNumber).entrySet()) {
                System.out.println("------");
                System.out.println(weekEntry.getKey());
                System.out.println("Total Hours Worked: " + weekEntry.getValue());
            }
        }
        System.out.println("---------------------------");
    }
}

private static String getCellValueAsString(Cell cell) {
    if (cell.getCellType() == CellType.NUMERIC) {
        return String.valueOf((int) cell.getNumericCellValue());
    } else {
        return cell.getStringCellValue();
    }
}

private static String formatDateCell(Cell cell) {
    if (cell.getCellType() == CellType.NUMERIC) {
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        return sdf.format(cell.getDateCellValue());
    } else {
        return cell.getStringCellValue();
    }
}

private static LocalDate getCellDateValue(Cell cell) {
    if (cell.getCellType() == CellType.NUMERIC) {
        return cell.getDateCellValue().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    } else {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy", Locale.ENGLISH);
        return LocalDate.parse(cell.getStringCellValue(), formatter);
    }
}

private static double calculateWorkHours(Cell logInCell, Cell logOutCell) {
    try {
        double logInTime = getTimeAsNumeric(logInCell);
        double logOutTime = getTimeAsNumeric(logOutCell);
        return (logOutTime - logInTime) * 24; // Convert fraction of day to hours
    } catch (Exception e) {
        System.out.println("Error parsing work hours: " + e.getMessage());
        return 0;
    }
}

private static double getTimeAsNumeric(Cell cell) throws Exception {
    if (cell.getCellType() == CellType.NUMERIC) {
        return cell.getNumericCellValue();
    } else {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        Date date = sdf.parse(cell.getStringCellValue());
        return (date.getHours() + date.getMinutes() / 60.0 + date.getSeconds() / 3600.0) / 24.0;
    }
}
